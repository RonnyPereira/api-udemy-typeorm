instalar o nestJs - npm install -g @nestjs/cli

criar o projeto nestJs - nest new "nome do projeto"

Fazer o servidor ficar automatico - npm run start:dev

Criar um controller - nest g controller "nome"

Criar um serviço - nest g service "nome"

Criar um modulo - nest g module "nome"

Criar Classe - nest g class "local exemplo courses/dto/create-course.dto --no-spec


Validação de Dados e transformação  - npm i class-validator class-transformer
interligar os Dto  - npm i @nestjs/mapped-types
*******************************************************************************************************
instalação do TypeOrm - npm i typeorm @nestjs/typeorm pg

Para criar o container - docker run --name postgres -e 	POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres

Para rodar o container - docker start postgres	

Desligar o Docker de um projeto - docker stop postgres  

Para o Docher nao iniciar com o PC -  sudo systemctl disable postgresql

***************************************************************************************
Criar a class da entidade do courses - nest g class courses/entities/tag.entity --no-spec

*****************************************************************************************
Depois de cirar o arquivo de migrations - ormconfig.js - iniciar os comandos abaixo.

npx typeorm migration:create -n "nome" - no exemplo e o CourseRefactoring


npx typeorm migration:create "endereço/nome do arquivo" ./src/migrations/CourseRefactoring


atualizar a past dist - npm run build

npx typeorm migration:run

*********************************************************

 Liberar o commit
 
  entra na pasta
  ls -a  - verifica se tem o arquivo .git
  rm -rf .git - libera o arquivo para comitar 
********************************************************
Iniciando o Dockerfile

FROM node:14.15.4-alpine3.12

RUN apk add --no-cache bash

RUN npm install -g @nestjs/cli

USER node

WORKDIR /home/node/app

-------------------------------------------
Criar o espelho do container na raiz da api

ciar um arquivo - .docker/postgres/Dockerfile

dentro do arquivo

FROM postgres

RUN usermod -u 1000 postgres

-------------------------------------------------


Dentro da pasta .docker colocar o arquivo - entrypoint.sh

dentro do arquivo:

#!/bin/bash

npm install

npm run build

npx typeorm migration:run

npm run start:dev

--------------------------------------------------------------
No terminal

permissao de execucao do arquivo entrypoint - chmod +x .docker/entrypoint.sh
------------------------------------------------------------------
Docker Compose

cria um arquivo na raiz do projeto - docker-compose.yml

dentro do arquivo

version:"3"

services:
 app:
  build: .
  entrypoint: .docker/entrypoint.sh
  container_name: cursonestjs-app
  ports:
    - "3000:3000"
  volumes:
    - .:/home/node/app
  depends_on:
    - db 


db:
  build: .docker/postgres
  container_name: cursonestje-db
  restart: always
  tty: true
  ports:
    - "5432:5432"
  volumes:
    - .docker/dbdata:/var/lib/postgresql/data  

  environment:
    -POSTGRES_PASSWOD=postgres
    -POSTGRES_DB=cursonestjs

pgadmin:
  image:dpage/pgadmin4
  container_name: cursonestjs-pgadmin
  tty: true
  envirenment:
    - PGADMIN_DEFAULT_EMAIL=admin@admin.com
    - PGADMIN_DEFAULT_PASSWORD=admin
  ports:
    - "8000:80"
  depends_on:
    - db    

********************************************************************
Depois do objeto compilerOptions dentro do arquivo tsconfig.json colocar os itens abaixo 

 "include": ["src"],
  "exclude": [
   "node_modules",
   "build",
   "dist",
   ".docker" 
  ]

************************************************************************
Comandos do docker compose 

 * docker-compose up - Criar  e inicia container
* docker-compose down - para e remove 
* docker-compose stop  - para o container 
* docker-compose start  - inicia o container



